# main source file

.org 0x10000000


# converts a decimal integer into fractional form
# given a decimal value and its length

# decimal number 
li $s0, 2983

# bias
li $s1, 10000

#mask
li $s2, 1

#counter 
li $s3, 0 

# collection register
li $s4, 0

# sig. bits
li $s5, 31

#result 
li $v0, 0


# need to calculate bias!


bin_d:
 sll $s0, $s0, 1  # mult by two
 addiu $s3, $s3, 1 # increment counter
 subu $s4, $s0, $s1 # sub bias into collection register 
 li $t0, 1
 slt $a0, $s4, $zero # $shifted val < (val - bias) ? 1:0
 beq $a0, $t0, append_zero # if true
 nop
 append_one:
  or $v0, $v0, $s2 # add a one
  sll $s2, $s2, 1 # shift mask
  move $s0, $s4 # retain bias result
  and $s4, $s4, $zero # clear bias result
  beq $s3, $s5, exit # pos. no. 31
  nop
j bin_d
nop

 append_zero:
  sll $s2, $s2, 1 # shift mask
  # retain shift value
  and $s4, $s4, $zero # clear bias result
  beq $s3, $s5, exit # pos. no. 31
  nop
  j  bin_d
  nop

exit:
 nop
