# main source file

.org 0x10000000

###############
# Team MIPSTER 
# 03.11.13
# Prep (Verify) 
###############


# provides the preconditions for format

# sample input array
integer_array:
 .space 5

fractional_array:
 .space 5

# pointer to the start of a block of array a
li $a0, integer_array

# initialize mem. block
li $t0, 0x1 # a[4]
sw $t0, 0($a0)
li $t0, 0x9 # a[8]
sw $t0, 4($a0)
li $t0, 0x3 # a[12]
sw $t0, 8($a0)
li $t0, 0xE # "." a[16]
sw $t0, 12($a0)

# pointer to the start of block of array b
li $a1, fractional_array 

li $t0, 0x4 # b[0]
sw $t0, 0($a1)
li $t0, 0x5 # b[4]
sw $t0, 4($a1)

# length of a
li $a2, 4

# length of b 
li $a3, 2
###############################

int_to_value:
move $s1, $a0
move $s2, $a2
# length of array - 2
li $t0, 2
subu $s2, $s2, $t0

next:
lw, $s3, 0($s1) # get byte
and $t1, $t1, $zero # reset counter
move $s4, $s3
beq $s2, $zero, add #just add if last byte
nop
mul:
li $t0, 10
mullo $s4, $s4, $t0 # mul by ten
addiu $t1, $t1 0x01 # inc counter
beq $t1, $s2, add # jump to add if done..
nop
j mul
nop

add:
addu $v0, $v0, $s4 # [$v0 = result]
addiu $s1, $s1, 0x4
li $t0, 1
beq $s2, $zero, frac_to_value
nop
subu $s2, $s2, $t0 # take one away
j next
nop

#######################################

frac_to_value:
move $s1, $a1
move $s2, $a3

# length of array - 1
li $t0, 1
subu $s2, $s2, $t0

next1:
lw, $s3, 0($s1) # get byte
and $t1, $t1, $zero # reset counter
move $s4, $s3
beq $s2, $zero, add1 #just add if last byte
nop
mul1:
li $t0, 10
mullo $s4, $s4, $t0 # mul by ten
addiu $t1, $t1 0x01 # inc counter
beq $t1, $s2, add1 # jump to add if done..
nop
j mul1
nop

add1:
addu $v1, $v1, $s4 # [$v0 = result]
addiu $s1, $s1, 0x4
li $t0, 1
beq $s2, $zero, exit
nop
subu $s2, $s2, $t0 # take one away
j next1
nop

exit:
nop